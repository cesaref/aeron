#!/usr/bin/env bash

SOURCE_DIR="`pwd`"
BUILD_DIR="`pwd`/cppbuild/Release"
EXTRA_CMAKE_ARGS=""
COVERAGE_BUILD=0
CMAKE_GENERATOR="CodeBlocks - Unix Makefiles"
BUILD_TYPE="Release"
CPUS=0

for option in "$@"
do
  case $option in
    --c-warnings-as-errors)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DC_WARNINGS_AS_ERRORS=ON"
      echo "Enabling warnings as errors for c"
      shift
      ;;
    --cxx-warnings-as-errors)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DCXX_WARNINGS_AS_ERRORS=ON"
      echo "Enabling warnings as errors for c++"
      shift
      ;;
    -b|--build-aeron-driver)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DBUILD_AERON_DRIVER=ON"
      echo "Enabling building of aeron driver"
      shift
      ;;
    --sanitise-build)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DSANITISE_BUILD=ON"
      echo "Enabling sanitise build"
      shift
      ;;
    --coverage-build)
      if (hash lcov 2>/dev/null && hash genhtml 2>/dev/null); then
        EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DCOVERAGE_BUILD=ON"
        echo "Enabling coverage build"
        COVERAGE_BUILD=1
      else
        echo "lcov/genhtml not found - you need these installed to run the coverage build"
        exit
      fi
      shift
      ;;
    --cpus=*)
      CPUS="${option#*=}"
      echo "Setting cpus to \"$CPUS\""
      shift
      ;;
    --generator=*)
      CMAKE_GENERATOR="${option#*=}"
      echo "Setting generator to \"$CMAKE_GENERATOR\""
      shift
      ;;
    --build-dir=*)
      BUILD_DIR="${option#*=}"
      echo "Setting build dir to \"$BUILD_DIR\""
      shift
      ;;
    --build-type=*)
      BUILD_TYPE="${option#*=}"
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CONFIGURATION_TYPES=$BUILD_TYPE"
      echo "Setting build type to \"$BUILD_TYPE\""
      shift
      ;;
    -h|--help)
      echo "$0 [--c-warnings-as-errors] [--cxx-warnings-as-errors] [--build-aeron-driver] [--sanitise-build] [--coverage-build] [--generator=<cmake generator>] [--build-dir=<directory>] [--cpus=<parallelism>]"
      exit
      ;;
    *)
      echo "Unknown option $option"
      echo "Use --help for help"
      exit
      ;;
  esac
done

if [ "$CPUS" -eq 0 ] ; then
  case "`uname`" in
    Darwin* )
      CPUS=`sysctl -n hw.ncpu`
      ;;
    Linux*)
      CPUS=$(lscpu -p | egrep -v '^#' | wc -l)
      ;;
  esac
fi

echo "Will make with \"-j $CPUS\"."

if [ -d "$BUILD_DIR" ] ; then
  echo "Build directory ($BUILD_DIR) exists, removing."
  rm -rf $BUILD_DIR
fi

mkdir -p $BUILD_DIR

if [ "$COVERAGE_BUILD" -eq 1 ] ; then
  cd $BUILD_DIR
  cmake -G "$CMAKE_GENERATOR" $EXTRA_CMAKE_ARGS $SOURCE_DIR && cmake --build . --config $BUILD_TYPE -- -j $CPUS && ctest -C $BUILD_TYPE -j $CPUS
  rm -rf coverage
  mkdir -p coverage
  lcov --directory . --base-directory . --capture -o coverage/cov.info
  lcov -o coverage/cov.stripped.info --remove coverage/cov.info "/usr/include/*" "*/googletest/*" "*/test/cpp/*" "*/googlemock/*"
  genhtml coverage/cov.stripped.info --demangle-cpp -o coverage
else
  (cd $BUILD_DIR && cmake -G "$CMAKE_GENERATOR" $EXTRA_CMAKE_ARGS $SOURCE_DIR && cmake --build . --config $BUILD_TYPE -- -j $CPUS && ctest -C $BUILD_TYPE -j $CPUS)
fi
